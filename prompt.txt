1. GCP 프로젝트 구조 설명 프롬프트

# Gon Cloud Platform (GCP) 구축 명세서

## 1. 프로젝트 개요

### 1.1 목적

AWS EC2와 유사한 기능을 제공하는 소규모 클라우드 플랫폼 구축

### 1.2 MVP 기능

- VPC 기반 가상 네트워크 환경
- 퍼블릭 서브넷, 라우팅 테이블, 인터넷 게이트웨이
- EC2 유사 가상 인스턴스 생성 및 관리
- 보안 그룹 및 네트워크 ACL
- 웹 기반 관리 콘솔

### 1.3 제약 사항

- 우분투 22.04 기반 3대 서버 구성
- 프라이빗 서브넷은 추후 구현
- 외부에서 인스턴스 직접 접속 가능

## 2. 시스템 아키텍처

### 2.1 서버 구성

```
Control Plane (121.36.55.1)
├── API Server
├── Web Console
├── Database (PostgreSQL)
├── Message Broker (RabbitMQ)
└── Network Controller

Worker Node 1 (121.36.55.2)
├── Hypervisor (KVM/QEMU)
├── Container Runtime (Docker)
├── Network Agent
└── Storage Agent

Worker Node 2 (121.36.55.3)
├── Hypervisor (KVM/QEMU)
├── Container Runtime (Docker)
├── Network Agent
└── Storage Agent
```

### 2.2 네트워크 토폴로지

```
Internet
    │
    ▼
[Internet Gateway]
    │
    ▼
[Virtual Router/NAT]
    │
    ▼
[Open vSwitch Bridge]
    │
    ├── [VPC-1] ── [Subnet-1] ── [Instance-1, Instance-2, ...]
    ├── [VPC-2] ── [Subnet-2] ── [Instance-3, Instance-4, ...]
    └── [VPC-N] ── [Subnet-N] ── [Instance-N, ...]
```

## 3. 기술 스택

### 3.1 백엔드

- **언어**: Go 1.21+
- **API 프레임워크**: Gin
- **데이터베이스**: PostgreSQL 14+
- **메시지 큐**: RabbitMQ 3.12+
- **분산 저장소**: etcd 3.5+

### 3.2 가상화 및 네트워킹

- **컨테이너**: Docker 24.0+
- **하이퍼바이저**: KVM/QEMU
- **네트워킹**: Open vSwitch 3.0+
- **방화벽**: iptables/netfilter

### 3.3 프론트엔드

- **프레임워크**: React 18
- **상태 관리**: Redux Toolkit
- **UI 라이브러리**: Ant Design
- **빌드 도구**: Vite

## 6. 서비스 구성 요소

### 6.1 Control Plane 서비스

### API Server (Port: 8080)

```go
// 주요 구조체
type Server struct {
    DB     *sql.DB
    Router *gin.Engine
    Config *Config
    MQ     MessageQueue
}

// 핵심 기능
- RESTful API 제공
- JWT 기반 인증
- 요청 검증 및 라우팅
- 비동기 작업 큐잉
```

### Network Controller (Port: 8081)

```go
// 주요 기능
- VPC 생성 및 관리
- 서브넷 IP 할당
- 라우팅 테이블 관리
- 보안 그룹 규칙 적용
- Open vSwitch 제어
```

### Instance Manager (Port: 8082)

```go
// 주요 기능
- 가상 머신 생성/삭제
- 리소스 할당 관리
- 워커 노드 로드 밸런싱
- 상태 모니터링
```

### 6.2 Worker Node 서비스

### Hypervisor Agent (Port: 9090)

```go
// 주요 기능
- KVM/QEMU 가상 머신 관리
- 리소스 모니터링
- 상태 보고
```

### Network Agent (Port: 9091)

```go
// 주요 기능
- 가상 네트워크 인터페이스 생성
- iptables 규칙 적용
- 트래픽 모니터링
```

### Container Agent (Port: 9092)

```go
// 주요 기능
- Docker 컨테이너 관리
- 이미지 관리
- 볼륨 마운트
```

## 7. 구현 단계별 계획

### Phase 1: 기반 인프라 구축 (2주)

1. **서버 환경 설정**
    - Ubuntu 22.04 기본 설정
    - 필수 패키지 설치 (KVM, Docker, Open vSwitch)
    - 네트워크 브리지 구성
2. **데이터베이스 설계**
    - PostgreSQL 설치 및 구성
    - 스키마 생성 및 초기 데이터
    - 마이그레이션 도구 개발
3. **기본 API 서버**
    - Go 프로젝트 구조 설정
    - Gin 기반 HTTP 서버
    - 데이터베이스 연결 및 ORM 설정

### Phase 2: 네트워크 가상화 구현 (3주)

1. **VPC 기본 기능**
    - VPC 생성/삭제 API
    - CIDR 블록 관리
    - Open vSwitch 브리지 생성
2. **서브넷 관리**
    - 퍼블릭 서브넷 생성
    - IP 주소 할당 관리
    - DHCP 서버 구성
3. **라우팅 및 게이트웨이**
    - 라우팅 테이블 구현
    - 인터넷 게이트웨이 설정
    - NAT 기능 구현

### Phase 3: 인스턴스 가상화 구현 (3주)

1. **KVM/QEMU 통합**
    - 가상 머신 템플릿 생성
    - 인스턴스 생성/시작/중지 API
    - 리소스 할당 관리
2. **Docker 컨테이너 지원**
    - 컨테이너 기반 경량 인스턴스
    - 이미지 관리 시스템
    - 네트워크 연결
3. **스토리지 관리**
    - LVM 기반 볼륨 관리
    - 스냅샷 기능
    - 볼륨 연결/해제

### Phase 4: 보안 및 네트워크 정책 (2주)

1. **보안 그룹**
    - 인바운드/아웃바운드 규칙
    - iptables 규칙 자동 생성
    - 동적 규칙 업데이트
2. **네트워크 ACL**
    - 서브넷 수준 접근 제어
    - 상태 비저장 필터링
    - 규칙 우선순위 관리

### Phase 5: 웹 콘솔 개발 (3주)

1. **React 프론트엔드**
    - 대시보드 UI
    - VPC 관리 인터페이스
    - 인스턴스 관리 콘솔
2. **실시간 모니터링**
    - WebSocket 기반 상태 업데이트
    - 리소스 사용량 차트
    - 로그 뷰어

### Phase 6: 테스트 및 최적화 (2주)

1. **통합 테스트**
    - API 엔드포인트 테스트
    - 네트워크 연결성 검증
    - 부하 테스트
2. **성능 최적화**
    - 데이터베이스 쿼리 최적화
    - 네트워크 성능 튜닝
    - 메모리 사용량 최적화

## 8. 배포 및 운영

### 8.1 서비스 배포

```bash
# Control Plane 배포
sudo systemctl enable gcp-api-server
sudo systemctl enable gcp-network-controller
sudo systemctl enable gcp-instance-manager

# Worker Node 배포
sudo systemctl enable gcp-hypervisor-agent
sudo systemctl enable gcp-network-agent
sudo systemctl enable gcp-container-agent
```

### 8.2 모니터링 및 로깅

- **메트릭 수집**: Prometheus
- **로그 집계**: ELK Stack (Elasticsearch, Logstash, Kibana)
- **알람**: Grafana + AlertManager

### 8.3 백업 및 복구

- **데이터베이스**: pg_dump 기반 백업
- **설정 파일**: etcd 스냅샷
- **인스턴스 이미지**: 스냅샷 자동화

### 프로젝트 디렉토리 구조
gon-cloud-platform/
├── README.md
├── Makefile
├── docker-compose.yml
├── .gitignore
├── .env.example
│
├── docs/                           # Documentation
│   ├── api/                        # API documentation
│   ├── architecture/               # Architecture documentation
│   └── deployment/                 # Deployment guides
│
├── scripts/                        # Scripts
│   ├── setup/                      # Environment setup scripts
│   │   ├── install-deps.sh
│   │   ├── setup-kvm.sh
│   │   ├── setup-ovs.sh
│   │   └── init-database.sh
│   ├── deploy/                     # Deployment scripts
│   └── monitoring/                 # Monitoring scripts
│
├── configs/                        # Configuration files
│   ├── control-plane/
│   ├── worker-node/
│   ├── database/
│   └── networking/
│
├── control-plane/                  # Control Plane services
│   ├── cmd/                        # Executable files
│   │   ├── api-server/
│   │   │   └── main.go
│   │   ├── network-controller/
│   │   │   └── main.go
│   │   └── instance-manager/
│   │       └── main.go
│   │
│   ├── internal/                   # Internal packages
│   │   ├── api/                    # API handlers
│   │   │   ├── handlers/
│   │   │   │   ├── vpc.go
│   │   │   │   ├── subnet.go
│   │   │   │   ├── instance.go
│   │   │   │   ├── security_group.go
│   │   │   │   └── auth.go
│   │   │   ├── middleware/
│   │   │   │   ├── auth.go
│   │   │   │   ├── cors.go
│   │   │   │   └── logging.go
│   │   │   └── routes/
│   │   │       └── router.go
│   │   │
│   │   ├── models/                 # Data models
│   │   │   ├── vpc.go
│   │   │   ├── subnet.go
│   │   │   ├── instance.go
│   │   │   ├── security_group.go
│   │   │   └── user.go
│   │   │
│   │   ├── database/               # Database related
│   │   │   ├── connection.go
│   │   │   ├── migrations/
│   │   │   └── repositories/
│   │   │       ├── vpc_repo.go
│   │   │       ├── subnet_repo.go
│   │   │       └── instance_repo.go
│   │   │
│   │   ├── services/               # Business logic
│   │   │   ├── vpc_service.go
│   │   │   ├── subnet_service.go
│   │   │   ├── instance_service.go
│   │   │   └── security_service.go
│   │   │
│   │   ├── network/                # Network management
│   │   │   ├── ovs_manager.go
│   │   │   ├── ip_allocator.go
│   │   │   ├── routing_table.go
│   │   │   └── firewall.go
│   │   │
│   │   ├── messaging/              # Message queue
│   │   │   ├── rabbitmq.go
│   │   │   ├── publisher.go
│   │   │   └── consumer.go
│   │   │
│   │   └── utils/                  # Utilities
│   │       ├── config.go
│   │       ├── logger.go
│   │       └── validator.go
│   │
│   ├── pkg/                        # Public packages
│   │   ├── errors/
│   │   ├── response/
│   │   └── constants/
│   │
│   ├── migrations/                 # DB migrations
│   │   ├── 001_create_vpcs.sql
│   │   ├── 002_create_subnets.sql
│   │   ├── 003_create_instances.sql
│   │   └── 004_create_security_groups.sql
│   │
│   ├── go.mod
│   ├── go.sum
│   └── Dockerfile
│
├── worker-node/                    # Worker Node agents
│   ├── cmd/                        # Executable files
│   │   ├── hypervisor-agent/
│   │   │   └── main.go
│   │   ├── network-agent/
│   │   │   └── main.go
│   │   └── container-agent/
│   │       └── main.go
│   │
│   ├── internal/                   # Internal packages
│   │   ├── hypervisor/             # KVM/QEMU management
│   │   │   ├── kvm_manager.go
│   │   │   ├── qemu_manager.go
│   │   │   └── resource_monitor.go
│   │   │
│   │   ├── container/              # Docker management
│   │   │   ├── docker_manager.go
│   │   │   ├── image_manager.go
│   │   │   └── volume_manager.go
│   │   │
│   │   ├── network/                # Network agent
│   │   │   ├── interface_manager.go
│   │   │   ├── iptables_manager.go
│   │   │   └── traffic_monitor.go
│   │   │
│   │   ├── storage/                # Storage management
│   │   │   ├── lvm_manager.go
│   │   │   └── snapshot_manager.go
│   │   │
│   │   └── agent/                  # Agent common
│   │       ├── client.go
│   │       ├── heartbeat.go
│   │       └── metrics.go
│   │
│   ├── go.mod
│   ├── go.sum
│   └── Dockerfile
│
├── web-console/                    # React web console
│   ├── public/
│   │   ├── index.html
│   │   └── favicon.ico
│   │
│   ├── src/
│   │   ├── components/             # React components
│   │   │   ├── common/
│   │   │   │   ├── Header.jsx
│   │   │   │   ├── Sidebar.jsx
│   │   │   │   └── Loading.jsx
│   │   │   │
│   │   │   ├── vpc/
│   │   │   │   ├── VPCList.jsx
│   │   │   │   ├── VPCCreate.jsx
│   │   │   │   └── VPCDetail.jsx
│   │   │   │
│   │   │   ├── instance/
│   │   │   │   ├── InstanceList.jsx
│   │   │   │   ├── InstanceCreate.jsx
│   │   │   │   └── InstanceDetail.jsx
│   │   │   │
│   │   │   └── security/
│   │   │       ├── SecurityGroupList.jsx
│   │   │       └── SecurityGroupCreate.jsx
│   │   │
│   │   ├── pages/                  # Page components
│   │   │   ├── Dashboard.jsx
│   │   │   ├── VPC.jsx
│   │   │   ├── Instances.jsx
│   │   │   └── Security.jsx
│   │   │
│   │   ├── store/                  # Redux store
│   │   │   ├── index.js
│   │   │   ├── slices/
│   │   │   │   ├── vpcSlice.js
│   │   │   │   ├── instanceSlice.js
│   │   │   │   └── authSlice.js
│   │   │   └── middleware/
│   │   │
│   │   ├── services/               # API services
│   │   │   ├── api.js
│   │   │   ├── vpcService.js
│   │   │   ├── instanceService.js
│   │   │   └── authService.js
│   │   │
│   │   ├── utils/
│   │   │   ├── constants.js
│   │   │   └── helpers.js
│   │   │
│   │   ├── styles/
│   │   │   ├── global.css
│   │   │   └── components/
│   │   │
│   │   ├── App.jsx
│   │   └── main.jsx
│   │
│   ├── package.json
│   ├── vite.config.js
│   ├── Dockerfile
│   └── .env.example
│
├── shared/                         # Shared libraries
│   ├── proto/                      # Protocol Buffers
│   │   ├── vpc.proto
│   │   ├── instance.proto
│   │   └── network.proto
│   │
│   └── schemas/                    # JSON schemas
│       ├── vpc.json
│       ├── instance.json
│       └── security_group.json
│
├── tests/                          # Tests
│   ├── unit/
│   ├── integration/
│   └── e2e/
│
├── deployments/                    # Deployment related
│   ├── systemd/                    # systemd service files
│   │   ├── gcp-api-server.service
│   │   ├── gcp-network-controller.service
│   │   ├── gcp-instance-manager.service
│   │   ├── gcp-hypervisor-agent.service
│   │   ├── gcp-network-agent.service
│   │   └── gcp-container-agent.service
│   │
│   ├── kubernetes/                 # K8s manifests (optional)
│   └── terraform/                  # Infrastructure as code (optional)
│
└── monitoring/                     # Monitoring configuration
    ├── prometheus/
    ├── grafana/
    └── elk/

### API Server routes
// Auth routes (no authentication required)
auth := router.Group("/api/v1/auth")
{
    auth.POST("/login", authHandler.Login)
    auth.POST("/register", authHandler.Register)
    auth.POST("/refresh", authHandler.RefreshToken)
}

// API routes (authentication required)
api := router.Group("/api/v1")
api.Use(middleware.AuthMiddleware(config.JWT.Secret))
{
    // VPC routes
    vpc := api.Group("/vpcs")
    {
        vpc.GET("", vpcHandler.ListVPCs)
        vpc.POST("", vpcHandler.CreateVPC)
        vpc.GET("/:id", vpcHandler.GetVPC)
        vpc.PUT("/:id", vpcHandler.UpdateVPC)
        vpc.DELETE("/:id", vpcHandler.DeleteVPC)
    }

    // Subnet routes
    subnet := api.Group("/subnets")
    {
        subnet.GET("", subnetHandler.ListSubnets)
        subnet.POST("", subnetHandler.CreateSubnet)
        subnet.GET("/:id", subnetHandler.GetSubnet)
        subnet.PUT("/:id", subnetHandler.UpdateSubnet)
        subnet.DELETE("/:id", subnetHandler.DeleteSubnet)
    }

    // Instance routes
    instance := api.Group("/instances")
    {
        instance.GET("", instanceHandler.ListInstances)
        instance.POST("", instanceHandler.CreateInstance)
        instance.GET("/:id", instanceHandler.GetInstance)
        instance.PUT("/:id", instanceHandler.UpdateInstance)
        instance.DELETE("/:id", instanceHandler.DeleteInstance)
        instance.POST("/:id/start", instanceHandler.StartInstance)
        instance.POST("/:id/stop", instanceHandler.StopInstance)
        instance.POST("/:id/restart", instanceHandler.RestartInstance)
    }

    // Security Group routes
    sg := api.Group("/security-groups")
    {
        sg.GET("", securityGroupHandler.ListSecurityGroups)
        sg.POST("", securityGroupHandler.CreateSecurityGroup)
        sg.GET("/:id", securityGroupHandler.GetSecurityGroup)
        sg.PUT("/:id", securityGroupHandler.UpdateSecurityGroup)
        sg.DELETE("/:id", securityGroupHandler.DeleteSecurityGroup)
        sg.POST("/:id/rules", securityGroupHandler.AddRule)
        sg.DELETE("/:id/rules/:rule_id", securityGroupHandler.RemoveRule)
    }

    // Instance Types
    api.GET("/instance-types", instanceHandler.ListInstanceTypes)

    // Images
    api.GET("/images", instanceHandler.ListImages)
}

-- Users
CREATE TABLE users (
    id UUID PRIMARY KEY,
    username TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    role TEXT NOT NULL CHECK (role IN ('admin', 'user')),
    is_active BOOLEAN DEFAULT TRUE,
    refresh_token TEXT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL
);

-- VPC
CREATE TABLE vpcs (
    id UUID PRIMARY KEY,
    name TEXT NOT NULL,
    cidr_block TEXT NOT NULL,
    description TEXT,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL
);

-- Subnet
CREATE TABLE subnets (
    id UUID PRIMARY KEY,
    vpc_id UUID REFERENCES vpcs(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    cidr_block TEXT NOT NULL,
    availability_zone TEXT NOT NULL,
    is_public BOOLEAN NOT NULL,
    created_at TIMESTAMPTZ NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL
);

-- Route Tables
CREATE TABLE route_tables (
    id UUID PRIMARY KEY,
    vpc_id UUID REFERENCES vpcs(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    is_main BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL
);

-- Routes
CREATE TABLE routes (
    id UUID PRIMARY KEY,
    route_table_id UUID REFERENCES route_tables(id) ON DELETE CASCADE,
    destination_cidr TEXT NOT NULL,
    target_type TEXT NOT NULL CHECK (target_type IN ('igw', 'nat', 'instance')),
    target_id UUID NOT NULL,
    priority INTEGER NOT NULL
);

-- Internet Gateway
CREATE TABLE internet_gateways (
    id UUID PRIMARY KEY,
    vpc_id UUID REFERENCES vpcs(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    state TEXT NOT NULL CHECK (state IN ('available', 'attached', 'detached')),
    created_at TIMESTAMPTZ NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL
);

-- Images
CREATE TABLE images (
    id UUID PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    os TEXT NOT NULL,
    version TEXT NOT NULL,
    architecture TEXT NOT NULL,
    is_public BOOLEAN DEFAULT FALSE,
    user_id UUID REFERENCES users(id) ON DELETE SET NULL,
    size BIGINT NOT NULL,
    created_at TIMESTAMPTZ NOT NULL
);

-- Instance Types
CREATE TABLE instance_types (
    name TEXT PRIMARY KEY,
    cpu INTEGER NOT NULL,
    memory INTEGER NOT NULL,
    storage INTEGER NOT NULL,
    network TEXT NOT NULL,
    price DOUBLE PRECISION NOT NULL
);

-- Instances
CREATE TABLE instances (
    id UUID PRIMARY KEY,
    name TEXT NOT NULL,
    instance_type TEXT REFERENCES instance_types(name) ON DELETE SET NULL,
    image_id UUID REFERENCES images(id) ON DELETE SET NULL,
    subnet_id UUID REFERENCES subnets(id) ON DELETE SET NULL,
    private_ip TEXT NOT NULL,
    public_ip TEXT,
    state TEXT NOT NULL CHECK (state IN ('pending', 'running', 'stopping', 'stopped', 'terminated')),
    worker_node_id UUID,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    key_pair TEXT,
    created_at TIMESTAMPTZ NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL
);

-- Security Groups
CREATE TABLE security_groups (
    id UUID PRIMARY KEY,
    name TEXT NOT NULL,
    description TEXT,
    vpc_id UUID REFERENCES vpcs(id) ON DELETE CASCADE,
    user_id UUID REFERENCES users(id) ON DELETE CASCADE,
    created_at TIMESTAMPTZ NOT NULL,
    updated_at TIMESTAMPTZ NOT NULL
);

-- Security Group Rules
CREATE TABLE security_group_rules (
    id UUID PRIMARY KEY,
    security_group_id UUID REFERENCES security_groups(id) ON DELETE CASCADE,
    direction TEXT NOT NULL CHECK (direction IN ('inbound', 'outbound')),
    protocol TEXT NOT NULL CHECK (protocol IN ('tcp', 'udp', 'icmp', 'all')),
    from_port INTEGER NOT NULL,
    to_port INTEGER NOT NULL,
    source TEXT NOT NULL,
    description TEXT
);

-- (Optional) Join table for instance <-> security groups
CREATE TABLE instance_security_groups (
    instance_id UUID REFERENCES instances(id) ON DELETE CASCADE,
    security_group_id UUID REFERENCES security_groups(id) ON DELETE CASCADE,
    PRIMARY KEY (instance_id, security_group_id)
);

-- (Optional) Instance tags as JSON key-value
CREATE TABLE instance_tags (
    instance_id UUID REFERENCES instances(id) ON DELETE CASCADE,
    key TEXT NOT NULL,
    value TEXT NOT NULL,
    PRIMARY KEY (instance_id, key)
);
